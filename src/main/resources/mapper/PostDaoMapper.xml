<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boyouquan.dao.PostDaoMapper">
    <sql id="insert_columns">
        link,
        blog_domain_name,
        title,
        description,
        published_at,
        draft,
        deleted
    </sql>
    <sql id="select_columns">
        link,
        blog_domain_name as blogDomainName,
        title,
        description,
        published_at as publishedAt,
        draft,
        deleted
    </sql>
    <select id="getMostPublishedInLatestOneMonth" resultType="com.boyouquan.model.BlogDomainNamePublish">
        SELECT
        blog_domain_name as blogDomainName,
        COUNT(*) as postCount
        FROM post
        WHERE draft=false
        AND deleted=false
        AND date(published_at) >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
        GROUP BY blog_domain_name
        ORDER BY postCount DESC LIMIT 1
    </select>
    <select id="getBlogPostPublishSeriesInLatestOneYear" resultType="com.boyouquan.model.MonthPublish">
        SET sql_mode
        ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

        select v.month,ifnull(b.count,0) count from (
        SELECT DATE_FORMAT((CURDATE() - INTERVAL 11 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 10 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 9 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 8 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 7 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 6 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 5 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 4 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 3 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 2 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT((CURDATE() - INTERVAL 1 MONTH), '%Y-%m') AS `month`
        UNION SELECT DATE_FORMAT(CURDATE(), '%Y-%m') AS `month`
        ) v
        left join
        (select
        DATE_FORMAT(a.published_at,'%Y-%m') as 'month',count(*) as count
        from post as a
        where DATE_FORMAT(a.published_at,'%Y-%m') >
        DATE_FORMAT(date_sub(curdate(), interval 12 month),'%Y-%m')
        AND blog_domain_name=#{blogDomainName}
        GROUP BY month
        )b
        on v.month = b.month group by v.month
    </select>
    <select id="countWithKeyWord" resultType="java.lang.Long">
        <choose>
            <when test="sort == null or sort == 'recommended'">
                SELECT
                COUNT(*)
                FROM post
                WHERE draft=false
                AND deleted=false
                AND description IS NOT NULL
                AND recommended=true
                <if test="keyword != null and keyword !=''">
                    AND title LIKE CONCAT('%', #{keyword}, '%')
                </if>
            </when>
            <otherwise>
                <choose>
                    <when test="keyword != null and keyword !=''">
                        SELECT
                        COUNT(*)
                        FROM post
                        WHERE draft=false
                        AND deleted=false
                        AND description IS NOT NULL
                        AND title LIKE CONCAT('%', #{keyword}, '%')
                    </when>
                    <otherwise>
                        SELECT
                        COUNT(*)
                        FROM post p1
                        INNER JOIN (
                        SELECT
                        blog_domain_name as unique_blog_domain_name,
                        MAX(published_at) as latest_published_at
                        FROM post
                        GROUP BY blog_domain_name
                        ) p2
                        ON p1.blog_domain_name = p2.unique_blog_domain_name
                        AND p1.published_at = p2.latest_published_at
                        AND p1.draft=false
                        AND p1.deleted=false
                        AND p1.description IS NOT NULL
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </select>
    <select id="listWithKeyWord" resultType="com.boyouquan.model.Post">
        <choose>
            <when test="sort == null or sort == 'recommended'">
                SELECT
                <include refid="select_columns"/>
                FROM post
                WHERE draft=false
                AND deleted=false
                AND recommended=true
                AND description IS NOT NULL
                ORDER BY published_at DESC
                LIMIT #{offset}, #{rows}
            </when>
            <otherwise>
                <choose>
                    <when test="keyword != null and keyword !=''">
                        SELECT
                        <include refid="select_columns"/>
                        FROM post
                        WHERE draft=false
                        AND deleted=false
                        AND description IS NOT NULL
                        <if test="keyword != null and keyword !=''">
                            AND title LIKE CONCAT('%', #{keyword}, '%')
                        </if>
                        ORDER BY published_at DESC
                        LIMIT #{offset}, #{rows}
                    </when>
                    <otherwise>
                        SELECT
                        <include refid="select_columns"/>
                        FROM post p1
                        INNER JOIN (
                        SELECT
                        blog_domain_name as unique_blog_domain_name,
                        MAX(published_at) as latest_published_at
                        FROM post
                        GROUP BY blog_domain_name
                        ) p2
                        ON p1.blog_domain_name = p2.unique_blog_domain_name
                        AND p1.published_at = p2.latest_published_at
                        AND p1.draft=false
                        AND p1.deleted=false
                        AND p1.description IS NOT NULL
                        ORDER BY p1.published_at DESC
                        LIMIT #{offset}, #{rows}
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
    </select>
    <select id="countAll" resultType="java.lang.Long">
        SELECT
        COUNT(*)
        FROM post
        WHERE draft=false
        AND deleted=false
    </select>
    <select id="getLatestPublishedAtByBlogDomainName" resultType="java.util.Date">
        SELECT
        MAX(published_at)
        FROM post
        WHERE draft=false
        AND deleted=false
        AND blog_domain_name=#{blogDomainName}
    </select>
    <select id="countByBlogDomainName" resultType="java.lang.Long">
        SELECT
        COUNT(*)
        FROM post
        WHERE draft=false
        AND deleted=false
        AND blog_domain_name=#{blogDomainName}
    </select>
    <select id="countByDraftAndBlogDomainName" resultType="java.lang.Long">
        SELECT
        COUNT(*)
        FROM post
        WHERE deleted=false
        AND draft=#{draft}
        AND blog_domain_name=#{blogDomainName}
    </select>
    <select id="listByDraftAndBlogDomainName" resultType="com.boyouquan.model.Post">
        SELECT
        <include refid="select_columns"/>
        FROM post
        WHERE deleted=false
        AND draft=#{draft}
        AND blog_domain_name=#{blogDomainName}
        ORDER BY published_at DESC
        LIMIT #{offset}, #{rows}
    </select>
    <select id="getByLink" resultType="com.boyouquan.model.Post">
        SELECT
        <include refid="select_columns"/>
        FROM post
        WHERE link=#{link}
    </select>
    <select id="existsByLink" resultType="boolean">
        SELECT
        EXISTS (
        SELECT 1 FROM post WHERE link=#{link}
        )
    </select>
    <select id="existsByTitle" resultType="boolean">
        SELECT
        EXISTS (
        SELECT 1 FROM post WHERE title=#{title}
        )
    </select>
    <insert id="batchSave" parameterType="java.util.List">
        INSERT INTO post (
        <include refid="insert_columns"/>
        ) VALUES
        <foreach collection="list" index="index" item="item" separator=",">
            (
            #{item.link},
            #{item.blogDomainName},
            #{item.title},
            #{item.description},
            #{item.publishedAt},
            #{item.draft},
            false
            )
        </foreach>
    </insert>
    <insert id="save">
        INSERT INTO post (
        <include refid="insert_columns"/>
        ) VALUES
        (
        #{link},
        #{blogDomainName},
        #{title},
        #{description},
        #{publishedAt},
        #{draft},
        false
        )
    </insert>
    <update id="batchUpdateDraftByBlogDomainName">
        UPDATE post
        SET draft=#{draft}
        WHERE blog_domain_name=#{blogDomainName}
    </update>
    <delete id="deleteByBlogDomainName">
        DELETE
        FROM post
        WHERE blog_domain_name=#{blogDomainName}
    </delete>
    <delete id="deleteByLink">
        DELETE
        FROM post
        WHERE link=#{link}
    </delete>
</mapper>