<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boyouquan.dao.BlogPostDaoMapper">
    <select id="getMostUpdatedBlogByLatestMonth" resultType="com.boyouquan.model.BlogAggregate">
        SELECT
        blog_address as address,
        blog_name as name,
        count(*) as postCount,
        max(created_at) as latestUpdatedAt
        FROM blog_post
        WHERE date(created_at) >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
        GROUP BY blog_address
        ORDER BY postCount DESC LIMIT 1
    </select>
    <select id="getBlogByRandom" resultType="com.boyouquan.model.BlogAggregate">
        SELECT
        max(blog_name) as name,
        max(blog_address) as address
        FROM blog_post
        GROUP BY blog_address
        ORDER BY RAND() LIMIT 1
    </select>
    <select id="listBlogsOrderByPostDate" resultType="com.boyouquan.model.BlogAggregate">
        SELECT
        max(blog_name) as name,
        max(blog_address) as address,
        max(created_at) as latestUpdatedAt,
        count(link) as postCount
        FROM blog_post
        <if test="keyword != null and keyword !=''">
            WHERE blog_name like concat('%', #{keyword}, '%')
            OR blog_address like concat('%', #{keyword}, '%')
        </if>
        GROUP BY blog_address
        ORDER by latestUpdatedAt DESC
        LIMIT #{offset}, #{rows}
    </select>
    <select id="listLatestBlogPostsByAddress" resultType="com.boyouquan.model.BlogPost">
        SELECT
        blog_name as blogName,
        blog_address as blogAddress,
        title,
        description,
        link,
        created_at as createdAt
        FROM blog_post
        WHERE blog_address=#{address}
        ORDER BY createdAt DESC
        LIMIT #{offset}, #{rows}
    </select>
    <select id="getBlogByAddress" resultType="com.boyouquan.model.BlogPost">
        SELECT
        blog_name as blogName,
        blog_address as blogAddress,
        title,
        description,
        link,
        created_at as createdAt
        FROM blog_post
        WHERE blog_address like concat('%', #{address}, '%')
        LIMIT 1
    </select>
    <select id="getBlogByLink" resultType="com.boyouquan.model.BlogPost">
        SELECT
        blog_name as blogName,
        blog_address as blogAddress,
        title,
        description,
        link,
        created_at as createdAt
        FROM blog_post
        WHERE link=#{link}
        LIMIT 1
    </select>
    <select id="countBlogPostsByAddress" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM blog_post
        WHERE blog_address=#{address}
    </select>
    <select id="listBlogPosts" resultType="com.boyouquan.model.BlogPost">
        SELECT
        blog_name as blogName,
        blog_address as blogAddress,
        title,
        description,
        link,
        created_at as createdAt
        FROM blog_post
        <if test="keyword != null and keyword !=''">
            WHERE title like concat('%', #{keyword}, '%')
        </if>
        ORDER BY createdAt DESC
        LIMIT #{offset}, #{rows}
    </select>
    <select id="listAllBlogs" resultType="com.boyouquan.model.BlogAggregate">
        SELECT
        max(blog_name) as name,
        max(blog_address) as address,
        max(created_at) as latestUpdatedAt,
        count(link) as postCount
        FROM blog_post
        <if test="keyword != null and keyword !=''">
            WHERE blog_name like concat('%', #{keyword}, '%')
            OR blog_address like concat('%', #{keyword}, '%')
        </if>
        GROUP BY blog_address
        ORDER by latestUpdatedAt DESC
    </select>
    <select id="countBlogPosts" resultType="java.lang.Integer">
        SELECT
        count(1)
        FROM blog_post
        <if test="keyword != null and keyword !=''">
            WHERE title like concat('%', #{keyword}, '%')
        </if>
    </select>
    <insert id="saveBlogPost">
        INSERT INTO blog_post (
        blog_name,
        blog_address,
        title,
        description,
        link,
        created_at
        ) VALUES (
        #{blogName},
        #{blogAddress},
        #{title},
        #{description},
        #{link},
        #{createdAt}
        )
    </insert>
    <delete id="deleteLaterBlogPostsByAddressAndDate">
        DELETE
        FROM blog_post
        WHERE blog_address=#{blogAddress}
        AND created_at>=#{datePoint}
    </delete>
    <select id="countBlogs" resultType="java.lang.Long">
        SELECT
        count(distinct blog_address)
        FROM blog_post
        <if test="keyword != null and keyword !=''">
            WHERE blog_name like concat('%', #{keyword}, '%')
            OR blog_address like concat('%', #{keyword}, '%')
        </if>
    </select>
</mapper>